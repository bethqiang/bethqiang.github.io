<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Senior Phase on Beth Qiang</title>
    <link>http://bethqiang.com/tags/senior-phase/index.xml</link>
    <description>Recent content in Senior Phase on Beth Qiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://bethqiang.com/tags/senior-phase/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Capstone, Part 3: Teleportation and Wrapping Up</title>
      <link>http://bethqiang.com/post/capstone-part-3-teleportation-and-wrapping-up/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/capstone-part-3-teleportation-and-wrapping-up/</guid>
      <description>

&lt;p&gt;Teleportation was something I ended up working on for basically a week straight, during which I produced multiple iterations of how to accomplish it with the Daydream controller. The plan was to shoot a raycaster into the ground, find where it intersected with the ground, and then move the user&amp;rsquo;s avatar to that intersection point. Sounds simple enough, right?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/ryanbetts/aframe-daydream-controller-component&#34; target=&#34;_blank&#34;&gt;aframe-daydream-controller-component&lt;/a&gt; comes with a built-in A-Frame raycaster, so setting up a simple scene with the controller and configuring it so that you&amp;rsquo;d move where your controller was pointing wasn&amp;rsquo;t terribly difficult. (&lt;a href=&#34;https://github.com/bethqiang/aframe-daydream-controller&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a lil baby thing I created to test it in an isolated environment, if you&amp;rsquo;re curious.)&lt;/p&gt;

&lt;p&gt;At first, I was getting wildly different coordinates when clicking the same place over and over, and was confused about why that was. I reached out on the &lt;a href=&#34;https://aframevr-slack.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;A-Frame Slack&lt;/a&gt; (which, sidenote, is a great place if you&amp;rsquo;re interested in or working with A-Frame), and learned that raycasters, at least the way they&amp;rsquo;re set up in A-Frame right now, typically will only give accurate coordinates when you&amp;rsquo;re detecting an intersection with something with depth — so instead of planes as our grounds, we had to use boxes with significant depth and then re-position them so that their top face was at &lt;code&gt;y=0&lt;/code&gt;. Just one of those A-Frame oddities that still haven&amp;rsquo;t quite been ironed out, it seems.&lt;/p&gt;

&lt;p&gt;Once I got that working successfully on a little baby app, I then attempted to implement that into our full app, and ran into a pretty big wall. With all of the assets we were loading and the other demands we were making of the browser, the browser refused to also correctly load the controller and its corresponding raycaster. Raycasters are generally pretty computationally heavy, and it seems we hit the limits of what a mobile browser could do.&lt;/p&gt;

&lt;p&gt;So, I needed a way to bring down the expense of using a raycaster, but a raycaster was also my best bet in terms of relatively easily and accurately getting an intersection point. Thus, after talking to our fellow and another team who was also using A-Frame for their Capstone Project, we decided to create a &amp;ldquo;temporary&amp;rdquo; raycaster — when the controller&amp;rsquo;s &lt;code&gt;button down&lt;/code&gt; event fired, we&amp;rsquo;d create our raycaster, shoot it out with the direction vector that our controller had, and find the intersection with the ground. Then, it&amp;rsquo;d cease to exist until the next time the &lt;code&gt;button down&lt;/code&gt; event was fired.&lt;/p&gt;

&lt;p&gt;In attempt to reduce the load even further, as well as skip over some of the bugs with A-Frame&amp;rsquo;s built-in raycaster, I ended up using three.js and its raycaster to do this, and placing the logic in an A-Frame component.&lt;/p&gt;

&lt;p&gt;To find the direction vector, I found the top and bottom vertices of the physical &lt;code&gt;ray&lt;/code&gt; (really, just a cyan-colored cylinder that was attached to and came out of the controller model), and found the vector between those two points. After most of a day of debugging smaller issues with the other team, we finally got this to work! (And, I had a nice little refresher with the vector math I had learned once upon a time in linear algebra.)&lt;/p&gt;

&lt;p&gt;In our debugging session, I learned two primary lessons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A-Frame and three.js can render elements with either buffer geometries or &amp;ldquo;regular&amp;rdquo; geometries. Buffer geometries are more performant and reduce memory usage, but are harder to manipulate because you don&amp;rsquo;t have access to properties like their vertices. A-Frame, by default, converts all geometries to buffer geometries, but this was a no-go because that meant we couldn&amp;rsquo;t do what we needed to do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;three.js&amp;rsquo;s raycaster&amp;rsquo;s &lt;code&gt;intersectObjects&lt;/code&gt; method takes two arguments, an array of objects you want to detect an intersection with, and an optional recursive flag that&amp;rsquo;s set to false by default if not specified. According to the documentation, &lt;code&gt;If true, it also checks all descendants. Otherwise it only checks intersection with the object. Default is false.&lt;/code&gt; Because we were explicitly telling it to check for the ground, and not any of its descendants, we left this as false. After many rounds of not getting intersections when we were clearly intersecting with the ground, we changed this to &lt;code&gt;true&lt;/code&gt; on the offhand that that was the issue — and what do you know, it was! We&amp;rsquo;re still not certain why we need this recursive flag, so more investigation on this matter will definitely be happening.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-gap&#34;&gt;&amp;ldquo;The Gap&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;One of my teammates added a really cool feature — the Gap! It&amp;rsquo;s another room that you can access with a number of Minecraft skins, including, among many others, Admiral Grace Hopper, Princess Belle, Robocop, the Pink Power Ranger, Mario, and Woody. Clicking on a Minecraft skin changes your avatar, with a fun little &amp;ldquo;Changed skin to [skin name]&amp;rdquo; voiceover. It&amp;rsquo;s super nifty!&lt;/p&gt;

&lt;h2 id=&#34;presentation-demo-day&#34;&gt;Presentation &amp;amp; Demo Day!&lt;/h2&gt;

&lt;p&gt;We then spent our last week prepping for our final presentation of this project on Demo Day. This was broadcast to a ton of people via Facebook Live, including some of my friends who were watching from around the country!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s our presentation, featuring all of the goodies I&amp;rsquo;ve talked about over the &lt;a href=&#34;http://bethqiang.com/post/react-redux-race-conditions-webrtc/&#34; target=&#34;_blank&#34;&gt;past&lt;/a&gt; &lt;a href=&#34;http://bethqiang.com/post/capstone-part-2-logging-in-the-chair-link-traversal/&#34; target=&#34;_blank&#34;&gt;three&lt;/a&gt; posts.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/I5ND_1PI77c&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;And &lt;a href=&#34;https://youtu.be/_M0p3UwNhB8&#34; target=&#34;_blank&#34;&gt;here&amp;rsquo;s&lt;/a&gt; a link to the entire hour of presentations, in case you want to see what my classmates have been up to!&lt;/p&gt;

&lt;p&gt;After that, a few more workshops, and a graduation, my Fullstack experience was over. It&amp;rsquo;s still weird to think about, and not logging into our Zoom classroom this morning was a slightly disorienting and also mildly sad experience, but I&amp;rsquo;m excited to continue on this journey and see what the next adventure has in store!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capstone, Part 2: Logging In, The Chair, and Link Traversal</title>
      <link>http://bethqiang.com/post/capstone-part-2-logging-in-the-chair-link-traversal/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/capstone-part-2-logging-in-the-chair-link-traversal/</guid>
      <description>

&lt;p&gt;So, it&amp;rsquo;s been a while. In the past couple of weeks, our project has gone from a scaffolded foundation to a thing with different rooms and avatar skins and couches, and it&amp;rsquo;s been really cool to see!&lt;/p&gt;

&lt;h2 id=&#34;logging-in&#34;&gt;Logging In&lt;/h2&gt;

&lt;p&gt;One of the first things we did following &lt;a href=&#34;http://bethqiang.com/post/react-redux-race-conditions-webrtc/&#34; target=&#34;_blank&#34;&gt;my last post&lt;/a&gt; was implement Login and OAuth. At one point, we were encountering a Sequelize race condition, where we couldn&amp;rsquo;t refer to the &lt;code&gt;user&lt;/code&gt; model with its filepath; instead, we had to import it into our file using &lt;code&gt;const User = require(&#39;../db&#39;).model(&#39;users&#39;)&lt;/code&gt;. I also spent a good few hours being puzzled over the fact that, despite forming a one-to-one association, a &lt;code&gt;user_id&lt;/code&gt; field was only being put on the &lt;code&gt;session&lt;/code&gt; table, and a &lt;code&gt;session_id&lt;/code&gt; wasn&amp;rsquo;t being put on the &lt;code&gt;user&lt;/code&gt; table. Silly me, &lt;code&gt;Session.belongsTo(User)&lt;/code&gt; and &lt;code&gt;User.hasOne(Session)&lt;/code&gt; will both put a &lt;code&gt;user_id&lt;/code&gt; field on the &lt;code&gt;session&lt;/code&gt; table. Definitely something I should have known, but at least I figured it out in the end?&lt;/p&gt;

&lt;p&gt;I also had my first encounter with React inline styling while creating the Login component! I haven&amp;rsquo;t come to a firm conclusion on how I feel about it yet, but some part of me seems to prefer it. It seems&amp;hellip;like less mental overhead somehow. I &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; like the fact that I wasn&amp;rsquo;t able to use things like &lt;code&gt;:focus&lt;/code&gt;, &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:before&lt;/code&gt;, and &lt;code&gt;:after&lt;/code&gt;, which my initial styling had depended on. For the first two, I ended up installing Radium, which effectively replicated them. I also learned about syntax decorators, and sprinkled that into our Babel configuration. For the last two, I resorted to just creating two &lt;code&gt;div&lt;/code&gt;s.&lt;/p&gt;

&lt;h2 id=&#34;the-chair&#34;&gt;THE CHAIR!!!!&lt;/h2&gt;

&lt;p&gt;As I mentioned in my previous post, A-Frame and React don&amp;rsquo;t really like each other very much. They&amp;rsquo;re fundamentally built on different programming paradigms, and there&amp;rsquo;s a lot of smaller issues that crop up (e.g. the words &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; are apparently React-specific words and we can&amp;rsquo;t use them as HTML attributes, or the fact that &lt;code&gt;a-sphere&lt;/code&gt;s will render fine, &lt;code&gt;a-cylinder&lt;/code&gt;s will render but throw wanrings, and &lt;code&gt;a-box&lt;/code&gt;es won&amp;rsquo;t render at all). Because of this, the moment we React-ified what we&amp;rsquo;ve now dubbed &amp;ldquo;the chair&amp;rdquo; was a pretty epic moment for us. It was the first time that it felt like A-Frame and React played nicely with each other!&lt;/p&gt;

&lt;p&gt;A-Frame HTML, like normal HTML, will ignore things it doesn&amp;rsquo;t understand. Apparently, A-Frame HTML has no concept of a &lt;code&gt;div&lt;/code&gt;. Therefore, in order to render different elements, we had to wrap them in &lt;code&gt;a-entity&lt;/code&gt; tags. Creating a singular chair was mostly a matter of some basic shapes and positioning.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default (props) =&amp;gt; (
  &amp;lt;a-entity id=&amp;quot;chair&amp;quot; position={`${props.x} ${props.y} ${props.z}`} rotation=&amp;quot;0 180 0&amp;quot;&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 1; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;-0.25 0.5 0&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 1; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;0.25 0.5 0&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 0.5; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;-0.25 0.25 0.5&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 0.5; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;0.25 0.25 0.5&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 0.05; depth: 0.05; width: 0.55&amp;quot;
              position=&amp;quot;0 1 0&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity material=&amp;quot;color: black&amp;quot;
              geometry=&amp;quot;primitive: box; depth: 0.55; height: 0.05; width: 0.55&amp;quot;
              position=&amp;quot;0 0.5 0.25&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
  &amp;lt;/a-entity&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(If an entity is a child of another entity, the parent element takes on what is analogous to absolute positioning, and its child elements take on what is analogous to relative positioning with relation to its parent element.)&lt;/p&gt;

&lt;p&gt;Once we had our singular React-ified chair, we passed in an array of positions. Each position was passed down to each chair via props. And voila, we had chairs on chairs on chairs!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/images/posts/2017-02/the-chair-reactifying-aframe-entities.png&#34; class=&#34;center-img&#34; alt=&#34;The chair, a demonstration in React-ifying A-Frame Entities&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;link-traversal&#34;&gt;Link Traversal&lt;/h2&gt;

&lt;p&gt;Early on, it was always an idea that we&amp;rsquo;d have different rooms &amp;ldquo;branching off&amp;rdquo; of our main room, where people could go to have private conversations. Our initial idea was to have one scene with interconnecting rooms literally branching off of it; almost like a real building would. However, as time went on, we realized that it might be easier for us to program the switching of rooms if we just had one room per scene, and switched out the scenes when a user entered or left a room.&lt;/p&gt;

&lt;p&gt;So, the next natural step would be to figure out how to get a user from one scene to another. We started off with the idea of hyperlinks, where each hyperlink would render a different component that contained a full &lt;code&gt;a-scene&lt;/code&gt; and everything in it. But, once we implemented them, we realized that Chromium would knock us out of VR mode to traverse links, so that was a no-go. Mozilla has apparently worked out a fix for this, but because VR mode doesn&amp;rsquo;t work on the Daydream with Firefox Nightly, we had to find a different workaround.&lt;/p&gt;

&lt;p&gt;Instead, we ended up with a single &lt;code&gt;a-scene&lt;/code&gt; tag in our main React component, and switching components wrapped in &lt;code&gt;a-entity&lt;/code&gt; tags in and out of it accordingly. It&amp;rsquo;s not the most ideal solution, but as of this point in time, there doesn&amp;rsquo;t seem to be a better way to accomplish this given the current state of the technology and Chrome&amp;rsquo;s security measures that prevent us from using a lot of WebVR APIs.&lt;/p&gt;

&lt;p&gt;Our links take the form of fancy magical floating orbs that glow a certain shade of blue when you hover over them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/images/posts/2017-02/aframe-hyperlink-orbs.png&#34; class=&#34;center-img&#34; alt=&#34;A-Frame Hyperlink Orbs&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Coming soon, to a blog near you: how a frog caused us a lot of mental anguish, how we solved (sort of) the teleportation/everything-else-is-eating-our-browser-resources problem, and how these two topics are very related.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Story of React, Redux, Race Conditions, and Real-Time Communication</title>
      <link>http://bethqiang.com/post/react-redux-race-conditions-webrtc/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/react-redux-race-conditions-webrtc/</guid>
      <description>

&lt;p&gt;Most of our work on our Capstone project this past week has been trying to set up the base for what we&amp;rsquo;ll be building the super cool features off of. So far, I ported &lt;a href=&#34;http://bethqiang.com/post/how-to-develop-a-vr-app-prototype/&#34; target=&#34;_blank&#34;&gt;my prototype&lt;/a&gt; over, put React in, took React out, put React in again, put Redux and Immutable.js in, fixed race conditions (race conditions and I have grown a little too familiar with each other for my liking), and learned an important lesson about &lt;code&gt;querySelector&lt;/code&gt;. I&amp;rsquo;ve also attempted to aid in implementing WebRTC, which has turned out to be surprisingly frustrating.&lt;/p&gt;

&lt;h2 id=&#34;react-and-a-frame&#34;&gt;React and A-Frame&lt;/h2&gt;

&lt;p&gt;We put React in initially because we thought it&amp;rsquo;d be a nice-to-have. Then we realized that, for our base MVP at least, we definitely wouldn&amp;rsquo;t be using it to any meaningful degree. A-Frame and React also don&amp;rsquo;t necessarily always play nice with each other; A-Frame is an entity-component-system framework, which favors composability over inheritance. React, on the other hand, is based on inheritance. One of the reasons React is so performant is that it batches its updates; however, when we&amp;rsquo;re going for 60 or 90fps+ real-time rendering, that&amp;rsquo;s maybe not quite what we want.&lt;/p&gt;

&lt;p&gt;Despite this, using React with A-Frame does have a few benefits. First, as long as we&amp;rsquo;re able to let A-Frame do the 3D and VR bits, React does a great job at what it was meant for: a view layer and managing state. Furthermore, I&amp;rsquo;ve heard that wrapping React over three.js (our other possible option) results in a lot of performance issues, but A-Frame provides the much-needed bridge between the 3D/VR world and React, lessening that performance hit by a not insignificant amount.&lt;/p&gt;

&lt;p&gt;We ultimately decided that if we do want to have various views in the future (which ideally we will, at least on the desktop version), it&amp;rsquo;d be better to have React in from the start, rather than needing to go back later to finagle it back in and make it play nice with everything already there. We&amp;rsquo;ve been told in our initial code review that, despite having React in our app, (1) it&amp;rsquo;s very un-React like and we could probably do more React-ifying, which I definitely want to look into soon and (2) it almost resembles an Angular app, because it&amp;rsquo;s very event-based right now.&lt;/p&gt;

&lt;h2 id=&#34;redux-and-immutable-js&#34;&gt;Redux and Immutable.js&lt;/h2&gt;

&lt;p&gt;I threw Redux into both ends as well, and converted our state to use Immutable.js. Using Redux on the back-end was an entirely new experience and it took an afternoon to go baby-step-by-baby-step to un-boggle my brain, but once I realized that it was &lt;em&gt;the exact same&lt;/em&gt; as Redux on the front-end — you dispatch an action, and your reducer changes the state based on that action — everything pretty much clicked afterwards.&lt;/p&gt;

&lt;p&gt;As I was adding in Immutable.js, I learned an interesting tidbit: socket.io doesn&amp;rsquo;t really understand Immutable collections and ends up converting them to plain JavaScript structures when sending them across the Internet. We were exceptionally confused for a short period of time when our back-end was supposedly sending an Immutable Map and our front-end could access properties on it like it was a normal object.&lt;/p&gt;

&lt;h2 id=&#34;another-race-condition&#34;&gt;Another Race Condition&lt;/h2&gt;

&lt;h3 id=&#34;or-when-i-learn-that-getelementbyid-queryselector-true&#34;&gt;Or, when I learn that getElementById &amp;gt; querySelector === true&lt;/h3&gt;

&lt;p&gt;We also had another race condition emerge that is strangely absent in my prototype. When a new user joined and there were existing users in the &amp;ldquo;room,&amp;rdquo; the back-end would sometimes start pushing this new user&amp;rsquo;s updates to the front-ends of everyone else before the new user had been able to be added to everyone else&amp;rsquo;s DOM. The &lt;code&gt;newUser&lt;/code&gt; function and the &lt;code&gt;updateUsers&lt;/code&gt; function were originally separate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;socket.on(&#39;newUser&#39;, user =&amp;gt; {
  console.log(&#39;Someone else has joined&#39;);
  putUserOnDOM(user);
});

socket.on(&#39;usersUpdated&#39;, users =&amp;gt; {
  console.log(&#39;Updating position for all users&#39;);
  Object.keys(users).forEach(user =&amp;gt; {
    const otherAvatar = document.querySelector(`#${users[user].id}`);
    otherAvatar.setAttribute(&#39;position&#39;, `${users[user].x} ${users[user].y} ${users[user].z}`);
    otherAvatar.setAttribute(&#39;rotation&#39;, `${users[user].xrot} ${users[user].yrot} ${users[user].zrot}`);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get rid of the race condition that this caused, I ended up implementing a conditional statement — if the element didn&amp;rsquo;t exist on the DOM, add it. If it did, then update as normal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;socket.on(&#39;usersUpdated&#39;, users =&amp;gt; {
  Object.keys(users).forEach(user =&amp;gt; {
    const otherAvatar = document.querySelector(`#${users[user].id}`);
    if (!otherAvatar) {
      putUserOnDOM(users[user]);
    } else {
      otherAvatar.setAttribute(&#39;position&#39;, `${users[user].x} ${users[user].y} ${users[user].z}`);
      otherAvatar.setAttribute(&#39;rotation&#39;, `${users[user].xrot} ${users[user].yrot} ${users[user].zrot}`);
    }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even after implementing this, we were having issues with the &lt;code&gt;querySelector&lt;/code&gt; — there seemed to be times that the &lt;code&gt;querySelector&lt;/code&gt; errored out, which prevented the &lt;code&gt;if&lt;/code&gt; statement from ever being executed, which means the user was never put on the DOM. As you can imagine, that&amp;rsquo;s a small problem. So, instead, I decided to use &lt;code&gt;getElementById&lt;/code&gt; (which I hadn&amp;rsquo;t tried in the first place because the majority of A-Frame examples I had seen used &lt;code&gt;querySelector&lt;/code&gt;). Since it was a guarantee that &lt;code&gt;getElementById&lt;/code&gt; would return &lt;code&gt;null&lt;/code&gt; if the element didn&amp;rsquo;t exist, we could ensure that the &lt;code&gt;if&lt;/code&gt; statement would execute when it needed to.&lt;/p&gt;

&lt;p&gt;I later discovered that in order to use &lt;code&gt;querySelector&lt;/code&gt; on IDs that are numbers, you sometimes &lt;a href=&#34;http://stackoverflow.com/questions/20306204/using-queryselector-with-ids-that-are-numbers&#34; target=&#34;_blank&#34;&gt;need to handle them in special ways&lt;/a&gt;. So, the reason it only sometimes freaked out on us was because our IDs were simply socket IDs, only some of them started with numbers. The more you know!&lt;/p&gt;

&lt;h2 id=&#34;real-time-audio-communication&#34;&gt;Real-Time Audio Communication&lt;/h2&gt;

&lt;p&gt;Though I hadn&amp;rsquo;t done a lot of WebRTC outside of my initial research when putting together my prototype, I started helping one of my teammates implement WebRTC. He had gotten &lt;em&gt;really&lt;/em&gt; close over the past few days, but still not quite there — two browsers were connected, but audio still wasn&amp;rsquo;t streaming from one to the other. We ended up attempting to use the &lt;a href=&#34;https://simplewebrtc.com/&#34; target=&#34;_blank&#34;&gt;SimpleWebRTC library&lt;/a&gt;, which we knew &lt;em&gt;was physically possible&lt;/em&gt; to integrate with our socket structure, but something about it was just not happy with our sockets. So, we moved on to reimplementing from scratch. TBD on how that turns out, but fingers crossed!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Develop a VR App Prototype, in 26 Steps</title>
      <link>http://bethqiang.com/post/how-to-develop-a-vr-app-prototype/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/how-to-develop-a-vr-app-prototype/</guid>
      <description>&lt;p&gt;Step 1: Come up with an idea. &lt;a href=&#34;http://bethqiang.com/post/codsworth-robotics-stackathon-design-lecture/&#34; target=&#34;_blank&#34;&gt;Decide upon attempting to prototype a social VR app&lt;/a&gt; that would support many users, as there isn&amp;rsquo;t one that exists today that does so, and ideally (if time permits) implement real-time audio.&lt;/p&gt;

&lt;p&gt;Step 2: Notice that &lt;a href=&#34;https://aframe.io/&#34; target=&#34;_blank&#34;&gt;A-Frame&lt;/a&gt; is supposedly easy to get up-and-running. Do some digging into creating multiuser experiences in A-Frame. Discover that someone has created a &lt;a href=&#34;https://github.com/ngokevin/kframe/tree/master/components/firebase&#34; target=&#34;_blank&#34;&gt;Firebase component in A-Frame&lt;/a&gt;, making the multiuser part &lt;em&gt;very&lt;/em&gt; easy.&lt;/p&gt;

&lt;p&gt;Step 3: Implement A-Frame and the Firebase component according to the example. Render a scene where when a user hits the page, another &amp;ldquo;avatar&amp;rdquo; pops up! With head-tracking!&lt;/p&gt;

&lt;p&gt;Step 4: Realize that with the enormous degree of abstraction going on, it&amp;rsquo;s really hard to understand what&amp;rsquo;s happening, and by extension, do anything to customize what&amp;rsquo;s in front of you.&lt;/p&gt;

&lt;p&gt;Step 5: Puzzle over what to do for a bit. Decide that websockets might be a better idea, instead of Firebase. You&amp;rsquo;re familiar with them, and you know that you could customize them to your liking.&lt;/p&gt;

&lt;p&gt;Step 6: Implement the basics of websockets. Get stuck on how to add A-Frame elements (which it calls &amp;ldquo;entities&amp;rdquo;) to the view when a user hits the page. Spend a few hours being confused.&lt;/p&gt;

&lt;p&gt;Step 7: Replace A-Frame with &lt;a href=&#34;https://threejs.org/&#34; target=&#34;_blank&#34;&gt;three.js&lt;/a&gt;, in attempt to get rid of some of the abstractions it&amp;rsquo;s making. Manage to render a view that would pop a cube on the screen when someone hit the page.&lt;/p&gt;

&lt;p&gt;Step 8: Become confused at why, when you opened a second incognito page, the first person/element wasn&amp;rsquo;t present anymore. (Fast forward to step 14.5: it&amp;rsquo;s because you never configured your sockets to do so. Whoops.)&lt;/p&gt;

&lt;p&gt;Step 9: Attempt to refactor the &lt;a href=&#34;https://github.com/borismus/webvr-boilerplate&#34; target=&#34;_blank&#34;&gt;webvr-boilerplate&lt;/a&gt; so that you could work with it slightly easier. End up breaking a lot of stuff.&lt;/p&gt;

&lt;p&gt;Step 10: Complain to a classmate about how terrible VR is. Contemplate starting a different project, although it&amp;rsquo;s 11pm on Friday night and you&amp;rsquo;re presenting on Monday. Create a new GitHub repo for your project. Start customizing the &lt;a href=&#34;https://github.com/chentsulin/electron-react-boilerplate&#34; target=&#34;_blank&#34;&gt;electron-react-boilerplate&lt;/a&gt; to fit the project you have in mind.&lt;/p&gt;

&lt;p&gt;Step 11: Wake up the next morning, determined once again to conquer VR. Download Unity for the first time. Watch an introductory video going over how to start developing an app for the Google Daydream with Unity. Use Unity to successfully create an app with a floating box and view it on the Daydream.&lt;/p&gt;

&lt;p&gt;Step 12: Follow a tutorial made for Google Cardboard to create a social VR app with Unity. Get stuck halfway through. Puzzle why over the person in the tutorial was able to delete his main camera, and you can&amp;rsquo;t, but also why you&amp;rsquo;re not able to switch the camera to the box that represents your avatar.&lt;/p&gt;

&lt;p&gt;Step 13: Decide to take another crack at A-Frame. Realize that A-Frame is just an HTML wrapper around a three.js object. Also realize that because of this, you can just append A-Frame entities to the DOM like you would anything else. Feel a tad bit dumb, because you should have realized this a while ago. But also feel wonderful, because this makes your life infinitely easier.&lt;/p&gt;

&lt;p&gt;Step 14: Bang out half of your app&amp;rsquo;s functionality, including the creation of a user, getting all existing users for the new user, and adding the new user to everyone else&amp;rsquo;s DOM. Get stuck on how to update each user&amp;rsquo;s position on everyone else&amp;rsquo;s view.&lt;/p&gt;

&lt;p&gt;Step 15: Have a chat with one of the core contributors to A-Frame. He recommends trying to use the built-in &lt;code&gt;tick&lt;/code&gt; component, which hooks into the browser&amp;rsquo;s native render loop. Attempt to implement this. Sort of succeed, except now a rather important part of your app is failing: a new user who joins isn&amp;rsquo;t able to receive the already-existing users. The already-existing users aren&amp;rsquo;t appearing at all on the new user&amp;rsquo;s DOM. Decide to call it a night and go to bed.&lt;/p&gt;

&lt;p&gt;Step 16: Wake up the next morning, and spend some time at the shelter, walking and playing with dogs. Because dogs make everything better.&lt;/p&gt;

&lt;p&gt;Step 17: Continue attempting to figure out what&amp;rsquo;s going wrong and how to fix it. Fail. Intermittently chat with previously mentioned core contributor, who&amp;rsquo;s traveling and on planes and can only talk sparingly and can&amp;rsquo;t really look at your code thoroughly. Fail to come to any meaningful conclusions.&lt;/p&gt;

&lt;p&gt;Step 18: Reach out to your fellow who&amp;rsquo;s a socket whiz, because you suspect this may have more to do with sockets than with A-Frame. He says give him a few hours.&lt;/p&gt;

&lt;p&gt;Step 19: Eat, because it&amp;rsquo;s 2pm and you haven&amp;rsquo;t eaten yet. Research WebRTC.&lt;/p&gt;

&lt;p&gt;Step 20: Meet with your fellow. Do A LOT of debugging, gradually getting closer and closer to the issue. Discover the issue was that entities were trying to push updates to new entities, before the new entities were able to load on the new user&amp;rsquo;s DOM.&lt;/p&gt;

&lt;p&gt;Step 21: Implement a somewhat roundabout and possibly non-ideal way to fix this, including creating a variable that switches to &lt;code&gt;true&lt;/code&gt; once the new user has received the existing users, and sending somewhat meaningless socket events back-and-forth between the client and the server. In the process, end up updating the user&amp;rsquo;s position twice for every render loop, which meant that the new user was experiencing some weird spazzy movements.&lt;/p&gt;

&lt;p&gt;Step 22: Hear from said fellow that A-Frame&amp;rsquo;s built-in WASD controls may not actually update the position. You may have to either programmatically temporarily disable them (for a very quick period of time) in order for the position to be updated, then enabled again after you update the position, or just create your own WASD controls.&lt;/p&gt;

&lt;p&gt;Step 23: Go grocery shopping. Wait forever in line, because everyone does their grocery shopping on Sunday evenings but you still haven&amp;rsquo;t learned to not go at that time.&lt;/p&gt;

&lt;p&gt;Step 24: Fix your double-updating-position problem. Tentatively try out just updating the user&amp;rsquo;s positions with the normal built-in WASD controls still enabled. REALIZE IT WORKS AND YOU DON&amp;rsquo;T HAVE TO ROLL YOUR OWN WASD CONTROLS!!!!!!!! Successfully broadcast the position of each user to every other user with a slightly hacky &lt;code&gt;setInterval&lt;/code&gt; loop and more somewhat meaningless socket events back and forth.&lt;/p&gt;

&lt;p&gt;Step 25: Add rotation tracking. Spend a couple of hours making your scene look pretty with trees and mountains. Create a super basic slideshow to start your presentation with for the next day.&lt;/p&gt;

&lt;p&gt;Step 26: Sigh in relief after your presentation. You might not have had time to implement real-time audio, but you accomplished at least your base goal, and that&amp;rsquo;s definitely something to be proud of.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The biggest lessons I learned from prototyping this app were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Experimenting is fun. Learning new technologies is fun. But, maybe when you only have five days to pull off a project, you should use something that&amp;rsquo;s above version 0.4.0.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VR is hard. Literally no one knows what they&amp;rsquo;re doing. Developing on a platform that was released a month ago makes it enormously harder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Most importantly, before you embark on implementing a new technology, understand the abstractions that it&amp;rsquo;s making. I spent much more time fighting with A-Frame than I did working with it, because I didn&amp;rsquo;t understand any of the abstractions that it uses.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As is the pace of life at Fullstack, we presented our Stackathon projects today, and immediately jumped into our final Capstone project. I was nervous (and still am) about doing another VR project, because this one took a fair bit out of me and I was slightly disillusioned with VR by the end. However, my teammates were excited about building upon what I had done and making this into a fully-fledged &lt;em&gt;thing&lt;/em&gt; (and despite my exhaustion and frustration, I was still very much excited about it as well) — so that&amp;rsquo;s happening! Wish us luck; we&amp;rsquo;ll definitely need it. I&amp;rsquo;m looking forward to the adventure we&amp;rsquo;re about to embark on!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;GitHub Repo for my project here: &lt;a href=&#34;https://github.com/bethqiang/transcend&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live demo of my project here: &lt;a href=&#34;https://transcend.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(The demo will probably be more effective if you have two incognito windows open, or recruit a friend to get on at the same time as you. Or, even better, have one person use a WebVR-enabled device, and one use a desktop!)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The End of Codsworth Robotics, the Beginning of Stackathon, and a Design Lecture</title>
      <link>http://bethqiang.com/post/codsworth-robotics-stackathon-design-lecture/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/codsworth-robotics-stackathon-design-lecture/</guid>
      <description>

&lt;p&gt;We presented &lt;a href=&#34;http://bethqiang.com/post/what-ive-been-up-to-for-4-weeks/&#34; target=&#34;_blank&#34;&gt;Codsworth Robotics&lt;/a&gt;, your one and only source for robot butlers, today in class. It&amp;rsquo;s officially live &lt;a href=&#34;http://codsworth-robotics.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, and you can view the code &lt;a href=&#34;https://github.com/Codsworth-Robotics/codsworth-robotics&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Although it still may be far from a production-ready app, it&amp;rsquo;s basically a fully-functioning e-commerce store, which is pretty impressive, if I do say so myself.&lt;/p&gt;

&lt;p&gt;One of the coolest moments of my young programming career so far happened on Monday night, when I hooked up the npm package &lt;code&gt;nodemailer&lt;/code&gt; to our checkout process, so that when a user places an order, they&amp;rsquo;ll immediately be sent an email with their confirmation number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/images/posts/2017-01/alfred-pennyworth.png&#34; class=&#34;center-img&#34; alt=&#34;Email from Alfred Pennyworth&#34;/&gt;&lt;/p&gt;

&lt;p&gt;My teammates made fun of me a little bit for being so excited about this, and I can&amp;rsquo;t &lt;em&gt;really&lt;/em&gt; articulate why I was, except for that it was just a moment for me when I realized &lt;em&gt;how incredible programming can be&lt;/em&gt;. Which I realize still sounds a little weird, because, at its core, I just sent myself an email. But, a lot of seemingly disparate things came together at that moment for me, I think. (And let&amp;rsquo;s be real, who doesn&amp;rsquo;t want an email from Alfred Pennyworth?!)&lt;/p&gt;

&lt;h2 id=&#34;stackathon&#34;&gt;Stackathon&lt;/h2&gt;

&lt;p&gt;The end of one project means the beginning of another! Today was the first day of Stackathon, which essentially is a personal hackathon. We have until Monday to build something (anything) of our choosing, and there are a couple of awards on the line.&lt;/p&gt;

&lt;p&gt;After internally debating for basically the past month about what I&amp;rsquo;ve wanted to do, I finally decided to attempt an &lt;a href=&#34;https://altvr.com/&#34; target=&#34;_blank&#34;&gt;AltSpace&lt;/a&gt; or &lt;a href=&#34;https://vtime.net/&#34; target=&#34;_blank&#34;&gt;vTime&lt;/a&gt;-like app, but one that could support many more people than those currently do. As Mark Davis, Fullstack&amp;rsquo;s Product Manager, &lt;a href=&#34;https://www.fullstackacademy.com/blog/vr-lab-jan-2017&#34; target=&#34;_blank&#34;&gt;describes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here&amp;rsquo;s what we wish existed, now: a simple VR environment where up to 25 avatars can interact with each other, with real-time voice chat, that&amp;rsquo;s accessible on a Google Daydream headset as an MVP, but is also extensible to any WebVR enabled headset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I only have five days, my primary goals will be to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Render a scene (I&amp;rsquo;m not worried about this part)&lt;/li&gt;
&lt;li&gt;Integrate with Firebase to support a lot of people joining (I&amp;rsquo;m more worried about this part), and&lt;/li&gt;
&lt;li&gt;Use WebRTC for real-time audio communication (I&amp;rsquo;m not even sure this part is going to happen, but hey, reach for the stars?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;d also love to pitch this to my Capstone Project team after, and build on top of it to create something even more amazing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve avoided seriously entertaining this idea pretty much since I started thinking about what I wanted to do, because every time I did, I would get overwhelmed and terrified. I&amp;rsquo;m very excited and intrigued by the VR space, but also terrified because of the sheer complexity of designing 3D environments and interactions with those environments.&lt;/p&gt;

&lt;p&gt;One of my favorite sayings is, &amp;ldquo;If your dreams don&amp;rsquo;t scare you, they&amp;rsquo;re not big enough.&amp;rdquo; I suppose that&amp;rsquo;s pretty applicable now — wish me luck!&lt;/p&gt;

&lt;h2 id=&#34;cto-lecture-design&#34;&gt;CTO Lecture: Design&lt;/h2&gt;

&lt;p&gt;During Senior Phase, we&amp;rsquo;re going to be having CTO Lectures on a regular basis. These are a series of lectures to expose us to the non-technical parts of building software, including design, scalability, agile, the &amp;ldquo;lean startup&amp;rdquo; methodology, etc. This was one of the parts about the program that I was looking forward to most, and today definitely did not disappoint.&lt;/p&gt;

&lt;p&gt;We heard from &lt;a href=&#34;https://www.linkedin.com/in/oddurs&#34; target=&#34;_blank&#34;&gt;Oddur Sigurdsson&lt;/a&gt;, who previously was Creative Director at Fullstack. He worked in the software/design industry for a number of years, and now runs his own company. To become a designer, he argued, there are three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Play. You should be making something. Experiment. Share it with others. &lt;strong&gt;&lt;em&gt;Ignore the rules.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Plan. Set guidelines for yourself. Set a direction (e.g., I want to be there in seven weeks, or two hours). Set goals, and don&amp;rsquo;t stop until you&amp;rsquo;ve achieved them.&lt;/li&gt;
&lt;li&gt;Polish. Iterate and refine. Find the balance between functional and beautiful. Push the limits of your abilities. Get critical feedback.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another one of his points was that there are striking similarities between programming and design, and I&amp;rsquo;d argue that these are very applicable to life as well.&lt;/p&gt;

&lt;p&gt;After talking generally about being a designer and the process of design, Oddur pulled out Photoshop and Sketch and demonstrated his workflows and tools for editing photos and creating site/app designs. He spent maybe 20 minutes maximum designing in Sketch, but his design was absolutely gorgeous and I was blown away.&lt;/p&gt;

&lt;p&gt;When I have an extra minute or two (so&amp;hellip;after Fullstack is over?), it&amp;rsquo;s definitely something I would love to delve into further. So much I want to do, so little time. Sigh.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shopping Carts &amp; Being Seniors</title>
      <link>http://bethqiang.com/post/shopping-carts-and-being-seniors/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/shopping-carts-and-being-seniors/</guid>
      <description>

&lt;p&gt;In the past few days, we&amp;rsquo;ve moved on from working primarily on the back-end of &lt;a href=&#34;http://bethqiang.com/post/what-ive-been-up-to-for-4-weeks/&#34; target=&#34;_blank&#34;&gt;Codsworth Robotics&lt;/a&gt; to actually rendering the data our back-end is feeding to us. We&amp;rsquo;ve also started putting together an overall theme and look.&lt;/p&gt;

&lt;p&gt;The features I&amp;rsquo;ve primarily been working on have been the Orders History page for a logged in user, and I just started working on our cart. Relatively early on in the process, we decided we were just going to have our cart saved on the session, and never actually persisted in the database. One of the main challenges I&amp;rsquo;ve faced while doing this was coming to terms with the fact that we weren&amp;rsquo;t actually going to the database in our back-end route to fetch and update and delete items in our cart; we were just setting an array on the &lt;code&gt;req.session&lt;/code&gt; object. Though the premise was the same — the front-end would dispatch an action, that would send an AJAX request to our back-end, which would manipulate that array, then send the resulting array back to the front-end — it just felt a little strange doing it.&lt;/p&gt;

&lt;p&gt;The primary benefits, I think, to doing it this way are it&amp;rsquo;s a little less intensive on our server and it&amp;rsquo;s a little easier to transition someone&amp;rsquo;s cart when they&amp;rsquo;re not signed up or logged in originally to when they do sign up or log in. The drawbacks are, that let&amp;rsquo;s say someone&amp;rsquo;s kid throws some Pokemon&amp;rsquo;s cards into dad&amp;rsquo;s cart, and then dad actually signs in, dad probably doesn&amp;rsquo;t want those Pokemon cards. Likewise, if you put items in your cart when logged into a computer that&amp;rsquo;s not primarily yours, your cart will persist to the next person who uses that computer but when you log in via a different computer, your cart may* not be there anymore. And, this didn&amp;rsquo;t even occur to me until our fellow mentioned it, but we actually have no knowledge about what&amp;rsquo;s in our users&amp;rsquo; carts, so we can&amp;rsquo;t gather data about it or market to them or send them endless emails about things sitting in their carts.&lt;/p&gt;

&lt;p&gt;*We may be attempting to solve this in the near future by setting the session ID to be the user&amp;rsquo;s email. May, being the key word&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;deployment-continuous-integration&#34;&gt;Deployment &amp;amp; Continuous Integration&lt;/h2&gt;

&lt;p&gt;We also went through a workshop about how to deploy and run continuous integration our apps via &lt;a href=&#34;https://www.heroku.com/&#34; target=&#34;_blank&#34;&gt;Heroku&lt;/a&gt; and &lt;a href=&#34;http://codeship.com/&#34; target=&#34;_blank&#34;&gt;Codeship&lt;/a&gt;. I&amp;rsquo;ve deployed apps to Heroku before, so I was relatively familiar with that process. But, I&amp;rsquo;ve never used any continuous integration tool before. Our first attempt at using CodeShip didn&amp;rsquo;t end up going so well — we ran into some errors, did something to fix it, ran into more errors, fixed those, then came across &lt;em&gt;new&lt;/em&gt; errors&amp;hellip;until finally our fellow told us we were spending too much time on it and it might be a good idea to kind of sort of make our app somewhat functional before really worrying about it. So, we deleted that and moved on.&lt;/p&gt;

&lt;p&gt;I did think the integration with CodeShip and Heroku was really cool; we could automate things to the point where all we&amp;rsquo;d have to do is push to GitHub, and then CodeShip would run, and then it would deploy automatically to Heroku. I&amp;rsquo;m excited for when we do get it to work to see all of it in action!&lt;/p&gt;

&lt;h2 id=&#34;not-project-related-things&#34;&gt;Not-Project-Related Things&lt;/h2&gt;

&lt;p&gt;I met with Career Services for the first time on Friday! Like most things in life, it was both wonderful and terrifying — wonderful because the future is always an exciting thing. Terrifying because, well, no one &lt;em&gt;really&lt;/em&gt; likes the job hunt, do they?! We talked mostly about what I&amp;rsquo;m looking for, where I&amp;rsquo;m looking for it, and in general things I should be thinking about. I took some time over the weekend to research some companies to put on my &amp;ldquo;Companies I&amp;rsquo;d Love to Work For&amp;rdquo; list, which I&amp;rsquo;ll be building out over the next few weeks.&lt;/p&gt;

&lt;p&gt;We also had our first Fullstack social with the new Remote cohort. First of all, it was a little weird (not in a bad way, just different&amp;hellip;) to see people who were not in our cohort in our video classroom! It was cool getting to meet and talk to the new class though, and we played some games together — &lt;a href=&#34;http://bethqiang.com/post/redux-authentication-and-social-activities/&#34; target=&#34;_blank&#34;&gt;Agamari&lt;/a&gt;, &lt;a href=&#34;https://pathparadox.com/&#34; target=&#34;_blank&#34;&gt;Path Paradox&lt;/a&gt; (which was &lt;em&gt;also&lt;/em&gt; built by a Fullstack group for their Capstone Project), and then I fought some zombies in Fullstack&amp;rsquo;s Minecraft world before calling it a night.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve volunteered to be on the Senior Panel for this class this week — &lt;a href=&#34;http://bethqiang.com/post/node-shell-expressjs-and-senior-panel/&#34; target=&#34;_blank&#34;&gt;remember when my cohort was the one listening to the Senior Panel&lt;/a&gt;?! It&amp;rsquo;s crazy to think about. It&amp;rsquo;s also a little weird thinking about the fact that people are actually looking to us for guidance now, because I still often feel like I have no idea what I&amp;rsquo;m doing. (I&amp;rsquo;m told that this never really changes.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What I&#39;ve Been Up To For The Past 4 Weeks</title>
      <link>http://bethqiang.com/post/what-ive-been-up-to-for-4-weeks/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/what-ive-been-up-to-for-4-weeks/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m alive, I promise. Mostly. I&amp;rsquo;m just running on very little sleep. Also, can we talk about the fact that this is the first post I get to tag with &amp;ldquo;senior phase&amp;rdquo;?!&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s talk about everything I&amp;rsquo;ve been doing since the last time I wrote about something that wasn&amp;rsquo;t me accidentally deleting my master branch of my blog. Over winter break, I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-did, in its entirety, &lt;a href=&#34;https://github.com/bethqiang/game-of-life&#34; target=&#34;_blank&#34;&gt;Game of Life&lt;/a&gt; using React and Redux. (&lt;a href=&#34;http://bethqiang.com/post/game-of-life-with-react-and-redux/&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; the post I wrote about the first half of it.)&lt;/li&gt;
&lt;li&gt;Created &lt;a href=&#34;https://github.com/bethqiang/vr-winter-wonderland&#34; target=&#34;_blank&#34;&gt;a baby WebVR + three.js app&lt;/a&gt;. It&amp;rsquo;s a snow scene with falling snow, like five trees, and a stationary penguin that I attempted to animate but would do weird things when I did. Weird penguin aside, it&amp;rsquo;s pretty rad. Also a cool and slightly surreal experience to view it in VR!&lt;/li&gt;
&lt;li&gt;Watched Guardians of the Galaxy for the first time and it was absolutely amazing.&lt;/li&gt;
&lt;li&gt;Re-did our &lt;a href=&#34;https://github.com/bethqiang/authentication-data-flow&#34; target=&#34;_blank&#34;&gt;Junior Phase workshop on authentication &amp;amp; OAuth&lt;/a&gt;. I felt like I definitely didn&amp;rsquo;t understand a lot of it the first time around, and going back a second time at least made me feel slightly better about it.&lt;/li&gt;
&lt;li&gt;Implemented most of &lt;a href=&#34;https://github.com/bethqiang/todo-react-redux-immutable&#34; target=&#34;_blank&#34;&gt;a todo app&lt;/a&gt; using React, Redux, and Immutable.js. I used this to also practice some frontend testing. It was thrilling.&lt;/li&gt;
&lt;li&gt;Started and finished most of my tech talk on Immutable Data &amp;amp; Immutable.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in the past four days, a lot has happened.&lt;/p&gt;

&lt;h2 id=&#34;grace-shopper&#34;&gt;Grace Shopper&lt;/h2&gt;

&lt;p&gt;Probably the biggest thing that&amp;rsquo;s happened is that we started our Grace Shopper project, an (eventually) fully-functioning e-Commerce store. Our store, &lt;a href=&#34;https://github.com/Codsworth-Robotics/codsworth-robotics&#34; target=&#34;_blank&#34;&gt;Codsworth Robotics&lt;/a&gt;, sells bots to help you with your gardening and cooking and butlering and general life-ing needs.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve personally worked on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up ESLint and configuring it&lt;/li&gt;
&lt;li&gt;Creating a few of the database models&lt;/li&gt;
&lt;li&gt;Writing tests for said models&lt;/li&gt;
&lt;li&gt;Adding signup and login features and functions that filter based on authorization&lt;/li&gt;
&lt;li&gt;And most recently writing the routes and views for users to view their orders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also just spent the last three hours trying and failing to fix a rather small but important thing (rendering the orders view automatically instead of on a click of a button, as it is right now), so this project is currently not on my list of favorite things ever.&lt;/p&gt;

&lt;p&gt;In general, it&amp;rsquo;s definitely been challenging trying to figure out what goes where and how all of the pieces fit together. It&amp;rsquo;s our first time creating a fully-fledged app with only a set of requirements and literally &lt;em&gt;nothing&lt;/em&gt; else. I 110% believe we&amp;rsquo;re definitely all capable of doing all of it and doing it well, but we&amp;rsquo;re still in some ways getting our bearings straight.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also been an interesting experience working as part of a team on a longer-term and larger-scale project (instead of just having a pairing partner for a workshop and then getting a different partner the next day). We have three people in our group, and we&amp;rsquo;ve paired all together on some things, and we&amp;rsquo;ve worked completely independently of each other on others, and sometimes one person branches off on their own while the other two pair.&lt;/p&gt;

&lt;p&gt;Regardless of who works on what, everyone reviews all pull requests before we agree to merge, and it&amp;rsquo;s definitely not uncommon, if/when we&amp;rsquo;re working individually, for someone to pipe up and say, &amp;ldquo;Hey, I&amp;rsquo;m having trouble with this, can I share my screen and get y&amp;rsquo;all&amp;rsquo;s input?&amp;rdquo; Needless to say, I&amp;rsquo;ve also learned more of and become much more comfortable with Git over the past few days! I&amp;rsquo;m still very afraid of merge conflicts and Git yelling at me, but I&amp;rsquo;m sure I&amp;rsquo;ll get used to it eventually.&lt;/p&gt;

&lt;h2 id=&#34;tech-talk-immutable-data-immutable-js&#34;&gt;Tech Talk: Immutable Data &amp;amp; Immutable.js&lt;/h2&gt;

&lt;p&gt;I finished my tech talk. I really wanted to incorporate live coding instead of the code snippets at the end, but I was pushing the time limit before I put in the code at all. Next time!&lt;/p&gt;

&lt;p&gt;I also presented it today. The good: I didn&amp;rsquo;t say &amp;ldquo;um&amp;rdquo; &lt;em&gt;quite&lt;/em&gt; as much as I typically do when speaking in public. The bad: when I was re-watching myself, I noticed at least two mistakes in my slides, and I think I relied on my notes a little too heavily. But hey, only way to get good at something is to keep doing it!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in seeing it, &lt;a href=&#34;https://www.youtube.com/watch?v=IDf-tpuj8Kw&#34; target=&#34;_blank&#34;&gt;it&amp;rsquo;s already up on Fullstack&amp;rsquo;s YouTube channel&lt;/a&gt;! The slides can be viewed &lt;a href=&#34;https://speakerdeck.com/bethqiang/immutable-data-and-immutable-dot-js&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;stackathon&#34;&gt;Stackathon&lt;/h2&gt;

&lt;p&gt;Another project that all Fullstack seniors do is the Stackathon project. We&amp;rsquo;re given four days to do literally anything we want, and we&amp;rsquo;re encouraged to work alone. (Although if you &lt;em&gt;really&lt;/em&gt; want to work with another person, no one&amp;rsquo;s going to stop you.)&lt;/p&gt;

&lt;p&gt;My instructor and I have thrown around some ideas for what I could do. Right now, I&amp;rsquo;m leaning towards either creating a library that I can publish to npm, or an Electron app. (My idea right now for the latter basically amounts to a WYSIWYG editor to write in with an option to convert it to Markdown for static site generators.) I&amp;rsquo;m torn between these because I think writing my own legitimate library would be fun, but I wouldn&amp;rsquo;t get to do any front-end design, which really frustrates me sometimes but it&amp;rsquo;s also something I really enjoy. I keep hearing from people I trust that Electron isn&amp;rsquo;t terribly hard to learn, so I&amp;rsquo;ll probably take a look at it this weekend and see if it would be do-able to do what I want to do in the span of the four days we&amp;rsquo;ll be given.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m simultaneously really looking forward to working on this, but also somewhat scared as well. It&amp;rsquo;ll be something I choose and something that excites me, but if given the chance and an excuse, I work &lt;em&gt;way&lt;/em&gt; too much – and that&amp;rsquo;s not in the humble brag &amp;ldquo;I work too hard&amp;rdquo; kinda way. That&amp;rsquo;s an I&amp;rsquo;ll-stay-up-unhealthily-late-(until 5 am late, hello Tuesday night)-working-on-things-because-I-can-and-because-it&amp;rsquo;s-more-fun-than-sleep-and-because-things-not-being-perfect-bother-me kinda way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>