<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Beth Qiang</title>
    <link>http://bethqiang.com/tags/testing/index.xml</link>
    <description>Recent content in Testing on Beth Qiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://bethqiang.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Week 3, Days 2 and 3: On Feeling Completely Overwhelmed</title>
      <link>http://bethqiang.com/blog/2016/11/16/on-feeling-completely-overwhelmed/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/blog/2016/11/16/on-feeling-completely-overwhelmed/</guid>
      <description>

&lt;p&gt;Let’s talk about feelings for a second. I’m generally a very optimistic person with a decent amount of confidence in myself, my critical-thinking and problem-solving abilities, and my ability to stick with something when it’s challenging. I don’t like to dwell on the negatives, and I generally try not to let myself get too down.&lt;/p&gt;

&lt;p&gt;But today was kind of a sucky day. It didn’t start off that way. I woke up after six hours of sleep feeling a little sleepy, but feeling pretty good about most of the material we had covered in the past couple of days. I knew that my blog post from yesterday needed editing, and set out to do that before class.&lt;/p&gt;

&lt;p&gt;As I was editing, I realized that maybe I didn’t understand some of the things we did as much as I thought I did. My post didn’t really make sense in a lot of places, and I couldn’t figure out how to &lt;em&gt;make&lt;/em&gt; it make sense. Then, we reviewed the solution to the workshop we did yesterday, and I quickly started getting overwhelmed – I knew generally how to write decent tests, and I thought I had a pretty good grasp of promises, but I was having a really hard time seeing how everything was connecting.&lt;/p&gt;

&lt;p&gt;Then, we talked more in-depth about promises, and my brain was still a little boggled and twisted from the session before, and I wasn’t able to follow as much as I maybe could have otherwise. By the end of the morning, I was completely overwhelmed, stressed, and my confidence was at the lowest point it’s been since Fullstack began. My brain was running in circles around itself, and even things I knew that I knew started to not make any sense.&lt;/p&gt;

&lt;p&gt;During lunch, when I usually take some time to read programming blogs or review what we covered during the morning or a variety of related things, my sole goal was to get out of the house and do something unrelated to coding for the entire hour and a half. I took a 45 minute walk while listening to a new podcast by Stephen Dubner, of Freaknomics fame, called &lt;a href=&#34;http://freakonomics.com/tmsidk/&#34; target=&#34;_blank&#34;&gt;Tell Me Something I Don’t Know&lt;/a&gt;. (It was literally a podcast about random facts. It was pretty interesting, though I don’t know if I’ll be a regular listener.) I then ate lunch, watched some cute puppy videos, and read about politics.&lt;/p&gt;

&lt;p&gt;Once I had an opportunity to calm down and reassure myself that I did in fact, know how to code and solve problems with some degree of competency, and that yes, I could do this, I knew I needed to change something. I needed more time. Time for me to do thorough concept reviews in the evenings, and do fun Code Wars problems, and go to meetups, and work on personal projects, and do more functional programming because for some reason that really excites me. I needed time do things that I find fun that aren&amp;rsquo;t directly related to class. And also, you know, sleep. But more importantly, I &lt;em&gt;also&lt;/em&gt; needed some time every day to do things like go for 45 minute walks or watch cute puppy videos or get dinner with a friend once in a blue moon. And run. Running helps. (That&amp;rsquo;s a long list, I know.)&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t an uncommon theme; I mentioned that I needed to improve upon my time management and prioritization in &lt;a href=&#34;http://bethqiang.com/blog/2016/11/13/fullstack-academy-week-2/&#34; target=&#34;_blank&#34;&gt;last week&amp;rsquo;s reflection post&lt;/a&gt;. I knew, at the time of writing that, that I needed to change &lt;em&gt;something&lt;/em&gt;. But I didn&amp;rsquo;t realize that I couldn&amp;rsquo;t keep doing what I was doing, and still stay sane.&lt;/p&gt;

&lt;p&gt;Outside of class and evening reviewing (which, in and of itself, I need to find a way to optimze), writing these posts have by far taken the largest chunk of my time. Daily 1,500-word blog posts are great, and I’m sure I’ll thank myself for them later. But, I’m starting to realize with the schedule that we have and the time I need outside of class, they’re unsustainable. Frankly, they take too much time to write, and even just saving an hour a day will give me an hour to start doing other things. That definitely doesn&amp;rsquo;t mean I&amp;rsquo;m going to abandon writing about each day. I just have to choose more wisely what I want to write, and cap the length of and detail in each post, thereby lessening the time that they take.&lt;/p&gt;

&lt;p&gt;In the interest of keeping some kind of record of what we’ve been doing and learning the past two days, here’s a (sort of) quick-and-dirty summary.&lt;/p&gt;

&lt;h2 id=&#34;back-end-testing-and-sequelize-magic&#34;&gt;Back-End Testing and Sequelize Magic&lt;/h2&gt;

&lt;p&gt;We learned all about testing on the back-end. Some of the key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s generally preferable to use a different database to test your code than when you’re developing or when your app is in production, so that you can stick stuff in and take stuff out and completely reset your database freely. This can be done pretty easily by creating a process environment variable, and then setting a conditional for that variable when you’re setting your database.&lt;/li&gt;
&lt;li&gt;Constantly talking about Mocha and Chai made me constantly want a hot, creamy, caffeine- and sugar-laden beverages.&lt;/li&gt;
&lt;li&gt;When we’re using promises in our tests, which is often because much of what we’re testing is asynchronous, we need to include either &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;done&lt;/code&gt;. If neither are included, Mocha reads our tests, and passes them, &lt;em&gt;before our async functions finish doing what they’re supposed to do&lt;/em&gt;. And once our async functions are done, we&amp;rsquo;ll get an error – but the tests have already passed and Mocha&amp;rsquo;s over it. So that’s not good.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Done&lt;/code&gt; is passed into our test function, and then we can invoke it at the end (and in our &lt;code&gt;catch&lt;/code&gt;) to signal to Mocha that it’s good to go and can move on to the next test. If we don’t want to use &lt;code&gt;done&lt;/code&gt;, we can use &lt;code&gt;return&lt;/code&gt; instead, and to Mocha, it’ll almost be like an implied &lt;code&gt;then&lt;/code&gt; after.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we&amp;rsquo;re creating 3 pages to test if our &lt;code&gt;findByTag&lt;/code&gt; function works, with &lt;code&gt;done&lt;/code&gt;, this would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&#39;findByTag&#39;, function () {
  beforeEach(function(done) { // done is passed in
    Promise.all([
      Page.create({ new page info }),
      Page.create({ new page info }),
      Page.create({ new page info })
    ])
    .then(function() { // our success/error functions
      done();
    }, done)
  })
  it(&#39;gets pages with the search tag&#39;, function(done) { // done is passed in here as well
    Page.findByTag(&#39;tag&#39;)
    .then(function(pages) {
      expect(pages).to.equal(something)
      expect(pages).to.equal(somethingelse)
      done(); // this indicates the end of the async
    })
    .catch(done); // error-handling
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;return&lt;/code&gt;, the same code would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&#39;findByTag&#39;, function () { // no done being passed
  beforeEach(function() {
    return Promise.all([ // return this
      Page.create({ info }),
      Page.create({ info }),
      Page.create({ info })
    ]) // no need for success/error functions using done
  })
  it(&#39;gets pages with the search tag&#39;, function() { // no done being passed
    return Page.findByTag(&#39;tag&#39;) // return this
    .then(function(pages) {
      expect(pages).to.equal(something)
      expect(pages).to.equal(somethingelse) // no done after this
    })
  }); // and no need for a catch(done) statement here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Tuesday, my pair and I were working on tests for our &lt;a href=&#34;http://bethqiang.com/blog/2016/11/14/building-a-wikipedia-clone/&#34; target=&#34;_blank&#34;&gt;Wikipedia clone&lt;/a&gt;, and for one of them, we were creating an instance that pulled from two models, &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Page&lt;/code&gt;. After wrestling with it for an hour and a half and finally getting it to work the non-magical, slightly harder, and not as pretty way, our fellow then asked us if we wanted to try a little Sequelize magic to make this happen – a little something called eager creation. Here’s what we worked through to come up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// in models &amp;gt; index.js, set associations:
Page.belongsTo(User);
User.hasMany(Page);

// in our test specs, creating a new instance:
beforeEach(function(done) {
User.create({
  name: &#39;Spock&#39;,
  email: &#39;spock@starfleet.gov&#39;,
  pages: [{
    title: &#39;Science Officer\&#39;s Log #7&#39;,
    content: &#39;Humans are emotional.&#39;,
    status: &#39;open&#39;,
    tags: [&#39;Sci-fi&#39;, &#39;TV&#39;]
    }]
    },
    {
      include: [ Page ]
    })
    .then(newInfo =&amp;gt; {
      newPageInfo = newInfo.pages; // our pages data can now be accessed via the pages property
      done();
    })
    .catch(done);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also learned that Sequelize is way too smart and picky for its own good. For an entire hour, we tried an incredible number of ways and syntaxes to create a &lt;code&gt;page&lt;/code&gt; property, but every time, we’d get an empty array back. The fact that we got an array back showed us that Sequelize was trying to give us something, just not what we wanted. Our fellow had a sudden realization – Sequelize was looking for a &lt;code&gt;pages&lt;/code&gt; property, and we were trying to give it a &lt;code&gt;page&lt;/code&gt; property. He also told us a funny (or not, if you were him) story about how he was once trying to do something similar with a property that ended in a “y” – which, in the English language, the plural becomes “ies.” For an entire day or two, he was trying to figure out why Sequelize was putting up a fit, before realizing he had specified the plural as “ys.”&lt;/p&gt;

&lt;h2 id=&#34;promise-mechanics-and-building-a-promise-library&#34;&gt;Promise Mechanics and Building a Promise Library&lt;/h2&gt;

&lt;p&gt;Today, we spent a good deal of time talking about the mechanics of promises, and we spent the afternoon building a deferral-style promise library similar to &lt;a href=&#34;https://docs.angularjs.org/api/ng/service/$q&#34; target=&#34;_blank&#34;&gt;AngularJS’s $q service&lt;/a&gt;. We created &lt;code&gt;$Promise&lt;/code&gt; and &lt;code&gt;Deferral&lt;/code&gt; classes, with the &lt;code&gt;then&lt;/code&gt; method on the &lt;code&gt;$Promise&lt;/code&gt; prototype that took two callback functions and the &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; methods on the &lt;code&gt;Deferral&lt;/code&gt; prototype.&lt;/p&gt;

&lt;p&gt;The first roadblock we faced was figuring out how to trigger the &lt;code&gt;then&lt;/code&gt; and the callback functions, which was stored in the &lt;code&gt;$promise&lt;/code&gt; instance, when the promise was resolved. Our first idea was to include it in the &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; methods, but then they’d be triggered right after a promise was fulfilled – not when the &lt;code&gt;then&lt;/code&gt; was called. We ended up creating an intermediate function, whose job was solely to take the callback function off of the array it was stored in and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$Promise.prototype.callHandlers = function(data) {
  if (this._state !== &#39;pending&#39;) {
    let fn = this._handlerGroups.shift();
    // handlerGroups was an array of objects containing success and failure functions
    fn.successCb(data);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second challenge we faced was to ensure that, even if events occurred in the opposite order – if the promise is resolved after the &lt;code&gt;then&lt;/code&gt; – that the &lt;code&gt;then&lt;/code&gt; would still run. We contemplated a myriad of options, including recursion, a while loop, a &lt;code&gt;setInterval&lt;/code&gt; to check the state of the promise, and ended up going down a rabbit hole trying to research &lt;code&gt;setImmediate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We later learned that the answer was &lt;em&gt;incredibly&lt;/em&gt; easy – we could just call our &lt;code&gt;callHandlers&lt;/code&gt; function in the same function that fulfilled the promise. When the &lt;code&gt;then&lt;/code&gt; is run initially (before the promise is fulfilled), it’ll add its callback functions to the storage array, and even though it calls the &lt;code&gt;callHandlers&lt;/code&gt; method, the &lt;code&gt;callHandlers&lt;/code&gt; method won’t invoke the callback because the state is still pending. When the promise is resolved, then we just need to call the &lt;code&gt;callHandlers&lt;/code&gt; method to run the callback functions that were already stored.&lt;/p&gt;

&lt;h2 id=&#34;game-night-round-2&#34;&gt;Game Night, Round 2&lt;/h2&gt;

&lt;p&gt;We also had another Game Night, where I finally got to see some of the things my fellow classmates have been building. Someone created a pool surrounded by lava. Someone else claimed an enormous plot of land – our theory is that he&amp;rsquo;s trying to build a subdivision and drive up rent. One of our instructors decided to cover his entire plot in glass blocks (because, why not, I guess?), and the other instructor built a cute little cabin. Apparently, someone built an absolutely frightening house – I can’t tell you what that means or what it looks like, because I was too absorbed in building my treehouse to venture over there. We’re having a Minecraft hackathon on Monday afternoon, and I have very little idea of what that involves, but I’m really excited!&lt;/p&gt;

&lt;p&gt;And on another note, it&amp;rsquo;s both hilarious and not how half of this post built up into “I need to write shorter posts”&amp;hellip;and this is over 1600 words, not including the code blocks. C’mon, Beth.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Absolute Beginner’s Guide to Test Driven Development</title>
      <link>http://bethqiang.com/blog/2016/10/17/beginners-guide-to-test-driven-development/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/blog/2016/10/17/beginners-guide-to-test-driven-development/</guid>
      <description>

&lt;p&gt;Test Driven Development (TDD) and testing were always terms that people would casually talk about and debate the merits of, but I never actually knew what it was. The furthest I ever managed to get was the understanding that it was “a way to make sure that what your code is doing what it should be doing,” which, while true, isn’t very descriptive or helpful in actually understanding what it was or how to do it.&lt;/p&gt;

&lt;p&gt;Then, people would start throwing around words like stubbing, mocking, and doubles, and I had even less of an idea of what was going on. That is, until my bootcamp’s Foundations phase, during which I was introduced to the idea in a relatively non-threatening way.&lt;/p&gt;

&lt;p&gt;For those of you who know sort-of kind-of what it is but don’t actually know what it is, I hope this helps in allowing you to at least grasp the fundamentals. Here’s what I’ve learned of what TDD actually means and how to use it in practice.&lt;/p&gt;

&lt;p&gt;The traditional coding process would be something like this: write code, see what happens, does it do what we want it to do? No &amp;ndash;&amp;gt; rewrite code. Yes &amp;ndash;&amp;gt; move on with life.&lt;/p&gt;

&lt;p&gt;Whereas, a TDD workflow would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/img/posts/2016-10/test-driven-development.png&#34; alt=&#34;Test Driven Development Workflow&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Essentially, you want to write tests, then write the simplest code possible to make those tests pass (they should be failing initially, because you haven’t written anything!). Once you’ve made all of the tests pass, go back and refactor your code to make it prettier and/or more efficient.&lt;/p&gt;

&lt;p&gt;Okay, that’s cool, I get that. But what are these “tests,” you ask? What do they contain? What does it mean “to make a test pass”? &lt;strong&gt;I didn’t understand how you could write code to make sure other code worked…because once you wrote it, wouldn’t you be able to tell if it worked or not?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that you want to write a program that will say, “Hello, [name]!”, where name is whatever name you give it. (Ex. If your name was Bob, and you wanted your program to say hello to you using your name: “Hello, Bob!”) If you don’t give your program a name, then you want it to say, “Hello, world!”&lt;/p&gt;

&lt;p&gt;So let’s try this TDD thing out. The idea is to write your tests first, before you write a single line of code. Your tests for this program could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&amp;quot;Hello&amp;quot;, function() {
  it(&amp;quot;says hello&amp;quot;, function() {
    expect(hello()).toEqual(&amp;quot;Hello, world!&amp;quot;);
  });

  it(&amp;quot;says hello to someone&amp;quot;, function() {
    expect(hello(&amp;quot;Fred&amp;quot;)).toEqual(&amp;quot;Hello, Fred!&amp;quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Different testing frameworks have different syntax for actually writing tests; we’ll be ignoring the actual syntax for now and focusing on the content.)&lt;/p&gt;

&lt;p&gt;Basically, what this test is saying is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a function called &lt;code&gt;hello&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When you call &lt;code&gt;hello()&lt;/code&gt;, you should get the string, “Hello, world!”&lt;/li&gt;
&lt;li&gt;When you call &lt;code&gt;hello()&lt;/code&gt; with a parameter, you could get the string, “Hello, + parameter!”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we can see in our testing framework (we’ve been using Jasmine and the test runner Test’em), both of our tests are currently failing. That’s good; that’s expected!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/img/posts/2016-10/jasmine-testing-screenshot-1.png&#34; alt=&#34;Jasmine Screenshot 1&#34;/&gt;&lt;/p&gt;

&lt;p&gt;It’s our job now to go through our tests, one by one, and write the simplest code we can to make each test pass. Our two tests are, “Hello says hello,” and “Hello says hello to someone.” The number of lines here may seem scary at first, but the key parts to pay attention to are the ones that are in light blue boxes - these tell us why our tests aren’t passing, and by extension, what we can do to fix it.&lt;/p&gt;

&lt;p&gt;Let’s focus on the first test for now. Jasmine’s reason for why this specific test didn’t pass is that hello is not defined. So, let’s try defining hello!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function hello() {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we look back at our tests:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/img/posts/2016-10/jasmine-testing-screenshot-2.png&#34; alt=&#34;Jasmine Screenshot 2&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Great! We now have a different error, which means something different is happening. Now, our first test’s feedback says, “Expected undefined to equal ‘Hello, world!’.” Jasmine is telling us that we’re expecting the output of &lt;code&gt;hello()&lt;/code&gt; to equal “Hello, world!”, but instead, we’re getting &lt;code&gt;undefined&lt;/code&gt;. Let’s try putting something in our function that will output “Hello, world!” when the function is run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function hello() {
  return &amp;quot;Hello, world!&amp;quot;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, let’s see what happened.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/img/posts/2016-10/jasmine-testing-screenshot-3.png&#34; alt=&#34;Jasmine Screenshot 3&#34;/&gt;&lt;/p&gt;

&lt;p&gt;One test disappeared! We can see at the top that of the 2 specs we started with, only 1 is failing now! If we switch into our spec list:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/img/posts/2016-10/jasmine-testing-screenshot-4.png&#34; alt=&#34;Jasmine Screenshot 4&#34;/&gt;&lt;/p&gt;

&lt;p&gt;We can see that “says hello” is now green, which means it passed. Congratulations! Now onto the second one.&lt;/p&gt;

&lt;p&gt;If you also notice, our error message has changed to “Expected ‘Hello, world!’ to equal ‘Hello, Fred!’”. So this lets us know that even when we specify a name, our program is still giving us, “Hello, world!” (Which isn’t what we want it to do!)&lt;/p&gt;

&lt;p&gt;We want a way to input a name, and have it spit it back to us. So, let’s add name as a parameter. And it seems like we only want “Hello, world!” to be returned &lt;strong&gt;&lt;em&gt;if&lt;/em&gt;&lt;/strong&gt; we don’t specify a name - so, let’s try using an if statement!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function hello(name) {
  if (name === undefined) {
    return &amp;quot;Hello, world!&amp;quot;;
  } else {
    return &amp;quot;Hello, &amp;quot; + name + &amp;quot;!&amp;quot;;
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we go back to our test specs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/img/posts/2016-10/jasmine-testing-screenshot-5.png&#34; alt=&#34;Jasmine Screenshot 5&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Woo, they’re both passing! Our program works exactly as it should.&lt;/p&gt;

&lt;h2 id=&#34;the-benefits-of-tdd&#34;&gt;The Benefits of TDD&lt;/h2&gt;

&lt;p&gt;For the past four weeks in my bootcamp, we’ve been given test specs and then tasked to write code that makes those tests pass. Some of the benefits that I’ve personally experienced from this approach, rather than the “traditional” approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces you to thoroughly think of what you actually need to do, rather than willy nilly writing a bunch of functions and seeing what happens. (Which I’ve done before, and I don’t recommend it!)&lt;/li&gt;
&lt;li&gt;I occasionally have the bad habit of trying to dive into everything at once, and end up confused and frustrated because some problems are way too big for that to work! TDD forces you to break down the problem before you try to solve it. It’s easy to say, “okay, my program just needs to do this one thing.” And once you have that one thing, then you add on the next thing.&lt;/li&gt;
&lt;li&gt;It allows you to pinpoint where your code is breaking. If something didn&amp;rsquo;t work in a program that was a couple hundred lines of code long, it often took going through all couple hundred of those lines and console logging almost everything to figure out what the problem was.&lt;/li&gt;
&lt;li&gt;It makes your code flexible, streamlined, and extensible. You’re never writing code you don’t need, and the code you do write is as straightforward and simple as possible. You always have the freedom to add to your existing code without fear that you’ll break your existing code and won’t be able to figure out why.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-drawback-s-of-tdd&#34;&gt;The Drawback(s?) of TDD&lt;/h2&gt;

&lt;p&gt;The only drawback I’ve personally experienced so far has been that you need to choose your test cases wisely. If you leave out certain elements to test, those parts of your program may not work as you intended them to. Or, sometimes your test case has multiple ways of getting to the end result, but you only want one of those ways to be the right one.&lt;/p&gt;

&lt;p&gt;For example, I once had a test case that started with the array &lt;code&gt;[0, 1, 2]&lt;/code&gt;, and wanted me to write a function that would mutate that array and output &lt;code&gt;[0, 3, 6]&lt;/code&gt;. Now, you might think the obvious way to do this would be to multiply each element by three. However, I made a mistake in my code and ended up multiplying each of the indices of the array by 3, rather than each number itself - but the test still passed because in this case, the indices were the same as the actual numbers in the array. If a different starting array had been chosen, I could have seen that mistake immediately.&lt;/p&gt;

&lt;p&gt;*That’s not to say there aren’t any other drawbacks; I just haven’t had enough experience yet to know first-hand what the others are.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-actually-write-tests&#34;&gt;How do I actually write tests?&lt;/h2&gt;

&lt;p&gt;So&amp;hellip;I haven’t gotten to that point yet. I’ve started some preliminary experiments with writing my own tests for a small back-end application that I’m trying to build, but am far from being confident in my ability to do so.&lt;/p&gt;

&lt;p&gt;(Also, on second thought, maybe I should have tried to just write tests for an existing app that I have instead of trying to figure out Node and Express and MongoDB AND writing tests, all for the first time, but hindsight is 20–20, right?)&lt;/p&gt;

&lt;h2 id=&#34;what-should-i-do-if-i-want-to-start-practicing-tdd&#34;&gt;What should I do if I want to start practicing TDD?&lt;/h2&gt;

&lt;p&gt;One of the best resources I’ve come across has been &lt;a href=&#34;http://exercism.io/&#34; target=&#34;_blank&#34;&gt;Exercism.io&lt;/a&gt;. It’s similar to &lt;a href=&#34;https://www.codewars.com/&#34; target=&#34;_blank&#34;&gt;Code Wars&lt;/a&gt; or &lt;a href=&#34;https://www.hackerrank.com/&#34; target=&#34;_blank&#34;&gt;Hacker Rank&lt;/a&gt; or any other coding challenge website, in that you choose a language and there’s a repository of problems available to you to solve. However, unlike Code Wars or Hacker Rank or anything else I’ve come across, instead of having a word problem, you get test specs instead, and your solution passes when all of your tests pass. There’s a little bit of system set-up involved to do this, but it’s a great platform!&lt;/p&gt;

&lt;p&gt;I’d also recommend just choosing a testing framework and learning the basics and syntax, then finding super easy problems and writing tests for those.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;If you’re looking for more resources, here are some that I’ve found to be helpful in understanding what it is, why you should do it, and a small tidbit of how to do it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://testfirst.org/&#34; target=&#34;_blank&#34;&gt;TestFirst.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.tutsplus.com/tutorials/the-newbies-guide-to-test-driven-development--net-13835&#34; target=&#34;_blank&#34;&gt;The Newbie’s Guide to Test Driven Development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/&#34; target=&#34;_blank&#34;&gt;Kata — The Only Way to Learn TDD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jrsinclair.com/articles/2016/one-weird-trick-that-will-change-the-way-you-code-forever-javascript-tdd/&#34; target=&#34;_blank&#34;&gt;One Weird Trick that Will Change the Way You Code Forever: JavaScript TDD&lt;/a&gt; (Clickbait-y title aside, it’s a great resource and has links to many others!)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>