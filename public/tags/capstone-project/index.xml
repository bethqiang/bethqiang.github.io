<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Capstone Project on Beth Qiang</title>
    <link>http://bethqiang.com/tags/capstone-project/index.xml</link>
    <description>Recent content in Capstone Project on Beth Qiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://bethqiang.com/tags/capstone-project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Capstone, Part 3: Teleportation and Wrapping Up</title>
      <link>http://bethqiang.com/post/capstone-part-3-teleportation-and-wrapping-up/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/capstone-part-3-teleportation-and-wrapping-up/</guid>
      <description>

&lt;p&gt;Teleportation was something I ended up working on for basically a week straight, during which I produced multiple iterations of how to accomplish it with the Daydream controller. The plan was to shoot a raycaster into the ground, find where it intersected with the ground, and then move the user&amp;rsquo;s avatar to that intersection point. Sounds simple enough, right?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/ryanbetts/aframe-daydream-controller-component&#34; target=&#34;_blank&#34;&gt;aframe-daydream-controller-component&lt;/a&gt; comes with a built-in A-Frame raycaster, so setting up a simple scene with the controller and configuring it so that you&amp;rsquo;d move where your controller was pointing wasn&amp;rsquo;t terribly difficult. (&lt;a href=&#34;https://github.com/bethqiang/aframe-daydream-controller&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a lil baby thing I created to test it in an isolated environment, if you&amp;rsquo;re curious.)&lt;/p&gt;

&lt;p&gt;At first, I was getting wildly different coordinates when clicking the same place over and over, and was confused about why that was. I reached out on the &lt;a href=&#34;https://aframevr-slack.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;A-Frame Slack&lt;/a&gt; (which, sidenote, is a great place if you&amp;rsquo;re interested in or working with A-Frame), and learned that raycasters, at least the way they&amp;rsquo;re set up in A-Frame right now, typically will only give accurate coordinates when you&amp;rsquo;re detecting an intersection with something with depth — so instead of planes as our grounds, we had to use boxes with significant depth and then re-position them so that their top face was at &lt;code&gt;y=0&lt;/code&gt;. Just one of those A-Frame oddities that still haven&amp;rsquo;t quite been ironed out, it seems.&lt;/p&gt;

&lt;p&gt;Once I got that working successfully on a little baby app, I then attempted to implement that into our full app, and ran into a pretty big wall. With all of the assets we were loading and the other demands we were making of the browser, the browser refused to also correctly load the controller and its corresponding raycaster. Raycasters are generally pretty computationally heavy, and it seems we hit the limits of what a mobile browser could do.&lt;/p&gt;

&lt;p&gt;So, I needed a way to bring down the expense of using a raycaster, but a raycaster was also my best bet in terms of relatively easily and accurately getting an intersection point. Thus, after talking to our fellow and another team who was also using A-Frame for their Capstone Project, we decided to create a &amp;ldquo;temporary&amp;rdquo; raycaster — when the controller&amp;rsquo;s &lt;code&gt;button down&lt;/code&gt; event fired, we&amp;rsquo;d create our raycaster, shoot it out with the direction vector that our controller had, and find the intersection with the ground. Then, it&amp;rsquo;d cease to exist until the next time the &lt;code&gt;button down&lt;/code&gt; event was fired.&lt;/p&gt;

&lt;p&gt;In attempt to reduce the load even further, as well as skip over some of the bugs with A-Frame&amp;rsquo;s built-in raycaster, I ended up using three.js and its raycaster to do this, and placing the logic in an A-Frame component.&lt;/p&gt;

&lt;p&gt;To find the direction vector, I found the top and bottom vertices of the physical &lt;code&gt;ray&lt;/code&gt; (really, just a cyan-colored cylinder that was attached to and came out of the controller model), and found the vector between those two points. After most of a day of debugging smaller issues with the other team, we finally got this to work! (And, I had a nice little refresher with the vector math I had learned once upon a time in linear algebra.)&lt;/p&gt;

&lt;p&gt;In our debugging session, I learned two primary lessons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A-Frame and three.js can render elements with either buffer geometries or &amp;ldquo;regular&amp;rdquo; geometries. Buffer geometries are more performant and reduce memory usage, but are harder to manipulate because you don&amp;rsquo;t have access to properties like their vertices. A-Frame, by default, converts all geometries to buffer geometries, but this was a no-go because that meant we couldn&amp;rsquo;t do what we needed to do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;three.js&amp;rsquo;s raycaster&amp;rsquo;s &lt;code&gt;intersectObjects&lt;/code&gt; method takes two arguments, an array of objects you want to detect an intersection with, and an optional recursive flag that&amp;rsquo;s set to false by default if not specified. According to the documentation, &lt;code&gt;If true, it also checks all descendants. Otherwise it only checks intersection with the object. Default is false.&lt;/code&gt; Because we were explicitly telling it to check for the ground, and not any of its descendants, we left this as false. After many rounds of not getting intersections when we were clearly intersecting with the ground, we changed this to &lt;code&gt;true&lt;/code&gt; on the offhand that that was the issue — and what do you know, it was! We&amp;rsquo;re still not certain why we need this recursive flag, so more investigation on this matter will definitely be happening.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-gap&#34;&gt;&amp;ldquo;The Gap&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;One of my teammates added a really cool feature — the Gap! It&amp;rsquo;s another room that you can access with a number of Minecraft skins, including, among many others, Admiral Grace Hopper, Princess Belle, Robocop, the Pink Power Ranger, Mario, and Woody. Clicking on a Minecraft skin changes your avatar, with a fun little &amp;ldquo;Changed skin to [skin name]&amp;rdquo; voiceover. It&amp;rsquo;s super nifty!&lt;/p&gt;

&lt;h2 id=&#34;presentation-demo-day&#34;&gt;Presentation &amp;amp; Demo Day!&lt;/h2&gt;

&lt;p&gt;We then spent our last week prepping for our final presentation of this project on Demo Day. This was broadcast to a ton of people via Facebook Live, including some of my friends who were watching from around the country!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s our presentation, featuring all of the goodies I&amp;rsquo;ve talked about over the &lt;a href=&#34;http://bethqiang.com/post/react-redux-race-conditions-webrtc/&#34; target=&#34;_blank&#34;&gt;past&lt;/a&gt; &lt;a href=&#34;http://bethqiang.com/post/capstone-part-2-logging-in-the-chair-link-traversal/&#34; target=&#34;_blank&#34;&gt;three&lt;/a&gt; posts.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/I5ND_1PI77c&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;And &lt;a href=&#34;https://youtu.be/_M0p3UwNhB8&#34; target=&#34;_blank&#34;&gt;here&amp;rsquo;s&lt;/a&gt; a link to the entire hour of presentations, in case you want to see what my classmates have been up to!&lt;/p&gt;

&lt;p&gt;After that, a few more workshops, and a graduation, my Fullstack experience was over. It&amp;rsquo;s still weird to think about, and not logging into our Zoom classroom this morning was a slightly disorienting and also mildly sad experience, but I&amp;rsquo;m excited to continue on this journey and see what the next adventure has in store!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capstone, Part 2: Logging In, The Chair, and Link Traversal</title>
      <link>http://bethqiang.com/post/capstone-part-2-logging-in-the-chair-link-traversal/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/capstone-part-2-logging-in-the-chair-link-traversal/</guid>
      <description>

&lt;p&gt;So, it&amp;rsquo;s been a while. In the past couple of weeks, our project has gone from a scaffolded foundation to a thing with different rooms and avatar skins and couches, and it&amp;rsquo;s been really cool to see!&lt;/p&gt;

&lt;h2 id=&#34;logging-in&#34;&gt;Logging In&lt;/h2&gt;

&lt;p&gt;One of the first things we did following &lt;a href=&#34;http://bethqiang.com/post/react-redux-race-conditions-webrtc/&#34; target=&#34;_blank&#34;&gt;my last post&lt;/a&gt; was implement Login and OAuth. At one point, we were encountering a Sequelize race condition, where we couldn&amp;rsquo;t refer to the &lt;code&gt;user&lt;/code&gt; model with its filepath; instead, we had to import it into our file using &lt;code&gt;const User = require(&#39;../db&#39;).model(&#39;users&#39;)&lt;/code&gt;. I also spent a good few hours being puzzled over the fact that, despite forming a one-to-one association, a &lt;code&gt;user_id&lt;/code&gt; field was only being put on the &lt;code&gt;session&lt;/code&gt; table, and a &lt;code&gt;session_id&lt;/code&gt; wasn&amp;rsquo;t being put on the &lt;code&gt;user&lt;/code&gt; table. Silly me, &lt;code&gt;Session.belongsTo(User)&lt;/code&gt; and &lt;code&gt;User.hasOne(Session)&lt;/code&gt; will both put a &lt;code&gt;user_id&lt;/code&gt; field on the &lt;code&gt;session&lt;/code&gt; table. Definitely something I should have known, but at least I figured it out in the end?&lt;/p&gt;

&lt;p&gt;I also had my first encounter with React inline styling while creating the Login component! I haven&amp;rsquo;t come to a firm conclusion on how I feel about it yet, but some part of me seems to prefer it. It seems&amp;hellip;like less mental overhead somehow. I &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; like the fact that I wasn&amp;rsquo;t able to use things like &lt;code&gt;:focus&lt;/code&gt;, &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:before&lt;/code&gt;, and &lt;code&gt;:after&lt;/code&gt;, which my initial styling had depended on. For the first two, I ended up installing Radium, which effectively replicated them. I also learned about syntax decorators, and sprinkled that into our Babel configuration. For the last two, I resorted to just creating two &lt;code&gt;div&lt;/code&gt;s.&lt;/p&gt;

&lt;h2 id=&#34;the-chair&#34;&gt;THE CHAIR!!!!&lt;/h2&gt;

&lt;p&gt;As I mentioned in my previous post, A-Frame and React don&amp;rsquo;t really like each other very much. They&amp;rsquo;re fundamentally built on different programming paradigms, and there&amp;rsquo;s a lot of smaller issues that crop up (e.g. the words &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; are apparently React-specific words and we can&amp;rsquo;t use them as HTML attributes, or the fact that &lt;code&gt;a-sphere&lt;/code&gt;s will render fine, &lt;code&gt;a-cylinder&lt;/code&gt;s will render but throw wanrings, and &lt;code&gt;a-box&lt;/code&gt;es won&amp;rsquo;t render at all). Because of this, the moment we React-ified what we&amp;rsquo;ve now dubbed &amp;ldquo;the chair&amp;rdquo; was a pretty epic moment for us. It was the first time that it felt like A-Frame and React played nicely with each other!&lt;/p&gt;

&lt;p&gt;A-Frame HTML, like normal HTML, will ignore things it doesn&amp;rsquo;t understand. Apparently, A-Frame HTML has no concept of a &lt;code&gt;div&lt;/code&gt;. Therefore, in order to render different elements, we had to wrap them in &lt;code&gt;a-entity&lt;/code&gt; tags. Creating a singular chair was mostly a matter of some basic shapes and positioning.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default (props) =&amp;gt; (
  &amp;lt;a-entity id=&amp;quot;chair&amp;quot; position={`${props.x} ${props.y} ${props.z}`} rotation=&amp;quot;0 180 0&amp;quot;&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 1; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;-0.25 0.5 0&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 1; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;0.25 0.5 0&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 0.5; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;-0.25 0.25 0.5&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 0.5; depth: 0.05; width: 0.05&amp;quot;
              position=&amp;quot;0.25 0.25 0.5&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity mixin=&amp;quot;chair-part&amp;quot;
              geometry=&amp;quot;height: 0.05; depth: 0.05; width: 0.55&amp;quot;
              position=&amp;quot;0 1 0&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
    &amp;lt;a-entity material=&amp;quot;color: black&amp;quot;
              geometry=&amp;quot;primitive: box; depth: 0.55; height: 0.05; width: 0.55&amp;quot;
              position=&amp;quot;0 0.5 0.25&amp;quot;&amp;gt;&amp;lt;/a-entity&amp;gt;
  &amp;lt;/a-entity&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(If an entity is a child of another entity, the parent element takes on what is analogous to absolute positioning, and its child elements take on what is analogous to relative positioning with relation to its parent element.)&lt;/p&gt;

&lt;p&gt;Once we had our singular React-ified chair, we passed in an array of positions. Each position was passed down to each chair via props. And voila, we had chairs on chairs on chairs!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/images/posts/2017-02/the-chair-reactifying-aframe-entities.png&#34; class=&#34;center-img&#34; alt=&#34;The chair, a demonstration in React-ifying A-Frame Entities&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;link-traversal&#34;&gt;Link Traversal&lt;/h2&gt;

&lt;p&gt;Early on, it was always an idea that we&amp;rsquo;d have different rooms &amp;ldquo;branching off&amp;rdquo; of our main room, where people could go to have private conversations. Our initial idea was to have one scene with interconnecting rooms literally branching off of it; almost like a real building would. However, as time went on, we realized that it might be easier for us to program the switching of rooms if we just had one room per scene, and switched out the scenes when a user entered or left a room.&lt;/p&gt;

&lt;p&gt;So, the next natural step would be to figure out how to get a user from one scene to another. We started off with the idea of hyperlinks, where each hyperlink would render a different component that contained a full &lt;code&gt;a-scene&lt;/code&gt; and everything in it. But, once we implemented them, we realized that Chromium would knock us out of VR mode to traverse links, so that was a no-go. Mozilla has apparently worked out a fix for this, but because VR mode doesn&amp;rsquo;t work on the Daydream with Firefox Nightly, we had to find a different workaround.&lt;/p&gt;

&lt;p&gt;Instead, we ended up with a single &lt;code&gt;a-scene&lt;/code&gt; tag in our main React component, and switching components wrapped in &lt;code&gt;a-entity&lt;/code&gt; tags in and out of it accordingly. It&amp;rsquo;s not the most ideal solution, but as of this point in time, there doesn&amp;rsquo;t seem to be a better way to accomplish this given the current state of the technology and Chrome&amp;rsquo;s security measures that prevent us from using a lot of WebVR APIs.&lt;/p&gt;

&lt;p&gt;Our links take the form of fancy magical floating orbs that glow a certain shade of blue when you hover over them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bethqiang.com/images/posts/2017-02/aframe-hyperlink-orbs.png&#34; class=&#34;center-img&#34; alt=&#34;A-Frame Hyperlink Orbs&#34;/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Coming soon, to a blog near you: how a frog caused us a lot of mental anguish, how we solved (sort of) the teleportation/everything-else-is-eating-our-browser-resources problem, and how these two topics are very related.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Story of React, Redux, Race Conditions, and Real-Time Communication</title>
      <link>http://bethqiang.com/post/react-redux-race-conditions-webrtc/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bethqiang.com/post/react-redux-race-conditions-webrtc/</guid>
      <description>

&lt;p&gt;Most of our work on our Capstone project this past week has been trying to set up the base for what we&amp;rsquo;ll be building the super cool features off of. So far, I ported &lt;a href=&#34;http://bethqiang.com/post/how-to-develop-a-vr-app-prototype/&#34; target=&#34;_blank&#34;&gt;my prototype&lt;/a&gt; over, put React in, took React out, put React in again, put Redux and Immutable.js in, fixed race conditions (race conditions and I have grown a little too familiar with each other for my liking), and learned an important lesson about &lt;code&gt;querySelector&lt;/code&gt;. I&amp;rsquo;ve also attempted to aid in implementing WebRTC, which has turned out to be surprisingly frustrating.&lt;/p&gt;

&lt;h2 id=&#34;react-and-a-frame&#34;&gt;React and A-Frame&lt;/h2&gt;

&lt;p&gt;We put React in initially because we thought it&amp;rsquo;d be a nice-to-have. Then we realized that, for our base MVP at least, we definitely wouldn&amp;rsquo;t be using it to any meaningful degree. A-Frame and React also don&amp;rsquo;t necessarily always play nice with each other; A-Frame is an entity-component-system framework, which favors composability over inheritance. React, on the other hand, is based on inheritance. One of the reasons React is so performant is that it batches its updates; however, when we&amp;rsquo;re going for 60 or 90fps+ real-time rendering, that&amp;rsquo;s maybe not quite what we want.&lt;/p&gt;

&lt;p&gt;Despite this, using React with A-Frame does have a few benefits. First, as long as we&amp;rsquo;re able to let A-Frame do the 3D and VR bits, React does a great job at what it was meant for: a view layer and managing state. Furthermore, I&amp;rsquo;ve heard that wrapping React over three.js (our other possible option) results in a lot of performance issues, but A-Frame provides the much-needed bridge between the 3D/VR world and React, lessening that performance hit by a not insignificant amount.&lt;/p&gt;

&lt;p&gt;We ultimately decided that if we do want to have various views in the future (which ideally we will, at least on the desktop version), it&amp;rsquo;d be better to have React in from the start, rather than needing to go back later to finagle it back in and make it play nice with everything already there. We&amp;rsquo;ve been told in our initial code review that, despite having React in our app, (1) it&amp;rsquo;s very un-React like and we could probably do more React-ifying, which I definitely want to look into soon and (2) it almost resembles an Angular app, because it&amp;rsquo;s very event-based right now.&lt;/p&gt;

&lt;h2 id=&#34;redux-and-immutable-js&#34;&gt;Redux and Immutable.js&lt;/h2&gt;

&lt;p&gt;I threw Redux into both ends as well, and converted our state to use Immutable.js. Using Redux on the back-end was an entirely new experience and it took an afternoon to go baby-step-by-baby-step to un-boggle my brain, but once I realized that it was &lt;em&gt;the exact same&lt;/em&gt; as Redux on the front-end — you dispatch an action, and your reducer changes the state based on that action — everything pretty much clicked afterwards.&lt;/p&gt;

&lt;p&gt;As I was adding in Immutable.js, I learned an interesting tidbit: socket.io doesn&amp;rsquo;t really understand Immutable collections and ends up converting them to plain JavaScript structures when sending them across the Internet. We were exceptionally confused for a short period of time when our back-end was supposedly sending an Immutable Map and our front-end could access properties on it like it was a normal object.&lt;/p&gt;

&lt;h2 id=&#34;another-race-condition&#34;&gt;Another Race Condition&lt;/h2&gt;

&lt;h3 id=&#34;or-when-i-learn-that-getelementbyid-queryselector-true&#34;&gt;Or, when I learn that getElementById &amp;gt; querySelector === true&lt;/h3&gt;

&lt;p&gt;We also had another race condition emerge that is strangely absent in my prototype. When a new user joined and there were existing users in the &amp;ldquo;room,&amp;rdquo; the back-end would sometimes start pushing this new user&amp;rsquo;s updates to the front-ends of everyone else before the new user had been able to be added to everyone else&amp;rsquo;s DOM. The &lt;code&gt;newUser&lt;/code&gt; function and the &lt;code&gt;updateUsers&lt;/code&gt; function were originally separate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;socket.on(&#39;newUser&#39;, user =&amp;gt; {
  console.log(&#39;Someone else has joined&#39;);
  putUserOnDOM(user);
});

socket.on(&#39;usersUpdated&#39;, users =&amp;gt; {
  console.log(&#39;Updating position for all users&#39;);
  Object.keys(users).forEach(user =&amp;gt; {
    const otherAvatar = document.querySelector(`#${users[user].id}`);
    otherAvatar.setAttribute(&#39;position&#39;, `${users[user].x} ${users[user].y} ${users[user].z}`);
    otherAvatar.setAttribute(&#39;rotation&#39;, `${users[user].xrot} ${users[user].yrot} ${users[user].zrot}`);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get rid of the race condition that this caused, I ended up implementing a conditional statement — if the element didn&amp;rsquo;t exist on the DOM, add it. If it did, then update as normal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;socket.on(&#39;usersUpdated&#39;, users =&amp;gt; {
  Object.keys(users).forEach(user =&amp;gt; {
    const otherAvatar = document.querySelector(`#${users[user].id}`);
    if (!otherAvatar) {
      putUserOnDOM(users[user]);
    } else {
      otherAvatar.setAttribute(&#39;position&#39;, `${users[user].x} ${users[user].y} ${users[user].z}`);
      otherAvatar.setAttribute(&#39;rotation&#39;, `${users[user].xrot} ${users[user].yrot} ${users[user].zrot}`);
    }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even after implementing this, we were having issues with the &lt;code&gt;querySelector&lt;/code&gt; — there seemed to be times that the &lt;code&gt;querySelector&lt;/code&gt; errored out, which prevented the &lt;code&gt;if&lt;/code&gt; statement from ever being executed, which means the user was never put on the DOM. As you can imagine, that&amp;rsquo;s a small problem. So, instead, I decided to use &lt;code&gt;getElementById&lt;/code&gt; (which I hadn&amp;rsquo;t tried in the first place because the majority of A-Frame examples I had seen used &lt;code&gt;querySelector&lt;/code&gt;). Since it was a guarantee that &lt;code&gt;getElementById&lt;/code&gt; would return &lt;code&gt;null&lt;/code&gt; if the element didn&amp;rsquo;t exist, we could ensure that the &lt;code&gt;if&lt;/code&gt; statement would execute when it needed to.&lt;/p&gt;

&lt;p&gt;I later discovered that in order to use &lt;code&gt;querySelector&lt;/code&gt; on IDs that are numbers, you sometimes &lt;a href=&#34;http://stackoverflow.com/questions/20306204/using-queryselector-with-ids-that-are-numbers&#34; target=&#34;_blank&#34;&gt;need to handle them in special ways&lt;/a&gt;. So, the reason it only sometimes freaked out on us was because our IDs were simply socket IDs, only some of them started with numbers. The more you know!&lt;/p&gt;

&lt;h2 id=&#34;real-time-audio-communication&#34;&gt;Real-Time Audio Communication&lt;/h2&gt;

&lt;p&gt;Though I hadn&amp;rsquo;t done a lot of WebRTC outside of my initial research when putting together my prototype, I started helping one of my teammates implement WebRTC. He had gotten &lt;em&gt;really&lt;/em&gt; close over the past few days, but still not quite there — two browsers were connected, but audio still wasn&amp;rsquo;t streaming from one to the other. We ended up attempting to use the &lt;a href=&#34;https://simplewebrtc.com/&#34; target=&#34;_blank&#34;&gt;SimpleWebRTC library&lt;/a&gt;, which we knew &lt;em&gt;was physically possible&lt;/em&gt; to integrate with our socket structure, but something about it was just not happy with our sockets. So, we moved on to reimplementing from scratch. TBD on how that turns out, but fingers crossed!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>